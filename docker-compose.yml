# ==========================================
# Documentation Generator - Docker Compose
# ==========================================
# Complete container orchestration with all configuration
# No separate .env file needed - all variables defined here

version: '3.8'

services:
  doc-generator:
    # Image name with version tag
    # Version 1.2.2: Autonomous agent - no interactive prompts, smart repomix resolution
    image: documentation_generator:1.2.4

    # Build configuration (optional - only used if image doesn't exist)
    build:
      context: .
      dockerfile: Dockerfile
      tags:
        - documentation_generator:1.2.4
        - documentation_generator:latest

    # Container name
    container_name: documentation-generator

    # Restart policy: Run once and stop when complete
    # ==========================================
    # DO NOT use 'unless-stopped' - it causes infinite restart loops
    # The container should complete the documentation generation task
    # and exit cleanly. No restart needed.
    # To run again, use: docker-compose up (or docker-compose start)
    restart: "no"

    # Environment Variables
    # ==========================================
    # IMPORTANT: Replace placeholder values with your actual configuration
    # Especially: GEMINI_API_KEY, PROJECT_PATH, PROJECT_NAME
    environment:
      # ==========================================
      # Google Gemini API Configuration
      # ==========================================
      # Get your free API key from: https://aistudio.google.com/apikey
      - GEMINI_API_KEY=AIzaSyD39IFvm8NciQPZHzSsgnM34iPgIFrIdAI
      - GEMINI_MODEL=gemini-2.5-flash-lite
      - GEMINI_TEMPERATURE=0.7
      - GEMINI_MAX_OUTPUT_TOKENS=8000

      # Rate Limiting Configuration
      # Gemini 2.5 Flash-Lite free tier: 15 requests per minute (RPM)
      # 5s delay = 12 req/min (80% utilization, safely under 15 RPM limit)
      # Flash-Lite is optimized for speed and high throughput
      - GEMINI_REQUEST_DELAY=5

      # Type-specific delays (optional - defaults to GEMINI_REQUEST_DELAY if not set)
      # All delays set to 5s for consistent throughput
      - GEMINI_PLAN_REQUEST_DELAY=5
      - GEMINI_SECTION_REQUEST_DELAY=5
      - GEMINI_SCREENSHOT_REQUEST_DELAY=5
      - GEMINI_DIAGRAM_REQUEST_DELAY=5

      # Rate limit enforcement (15 RPM for Flash-Lite free tier)
      # Note: 1,000 requests per day limit, 250K tokens/min
      - GEMINI_MAX_REQUESTS_PER_MINUTE=15

      # Exponential backoff configuration for retries
      - GEMINI_MAX_RETRIES=3
      - GEMINI_BASE_BACKOFF_DELAY=5

      # ==========================================
      # Project Configuration
      # ==========================================
      # PROJECT_PATH should point to the mounted project directory in the container
      - "PROJECT_NAME=Arise Mapview: FastAPI App"
      - PROJECT_PATH=/app/project
      - "PROJECT_DESCRIPTION=Comprehensive FastAPI backend for managing industrial plots and zones across multiple African countries with JWT authentication, role-based access control, and Firebase Firestore integration"

      # ==========================================
      # Repomix Configuration (Optional)
      # ==========================================
      # For better AI context, generate a repomix file first:
      # Command: repomix /path/to/project -o repomix-output.xml
      # Then place it in the project directory
      - REPOMIX_FILE_PATH=/app/project/repomix-output.xml
      - USE_REPOMIX=true

      # ==========================================
      # Output Configuration
      # ==========================================
      - OUTPUT_DIRECTORY=/app/output
      - OUTPUT_FILENAME=documentation.docx
      - SCREENSHOTS_DIRECTORY=/app/screenshots

      # ==========================================
      # Screenshot Configuration
      # ==========================================
      - ENABLE_SCREENSHOTS=true
      # Browser: 'chrome' or 'firefox' (chrome recommended for Docker)
      - BROWSER_CHOICE=chrome
      - SCREENSHOT_WAIT_TIME=3

      # Screenshot Optimization
      - MAX_SCREENSHOTS_PER_DOCUMENT=8
      - SCREENSHOT_PRIORITY_SECTIONS=installation,configuration,architecture,usage

      # ==========================================
      # Mermaid Diagram Configuration
      # ==========================================
      # Enable AI-generated architecture diagrams (flowcharts, sequence diagrams, etc.)
      - ENABLE_MERMAID_DIAGRAMS=true
      - MERMAID_DIAGRAMS_DIRECTORY=/app/mermaid_diagrams
      - MAX_MERMAID_DIAGRAMS=3

      # ==========================================
      # Live Application Screenshots (Optional)
      # ==========================================
      # Enable to capture screenshots of running applications
      # Useful for web apps, APIs, dashboards
      #
      # IMPORTANT: Docker networking considerations:
      # - 127.0.0.1 inside container refers to the CONTAINER, not your host machine
      # - To access host services from Docker:
      #   * Mac/Windows: Use host.docker.internal instead of 127.0.0.1
      #   * Linux: Use network_mode: host (uncomment below) OR use host's actual IP
      #
      # Example for Mac/Windows:
      #   - LIVE_APP_URL_HOME=http://host.docker.internal:8000
      #
      # Example for Linux with network_mode: host:
      #   - LIVE_APP_URL_HOME=http://127.0.0.1:8000  (requires network_mode: host below)
      #
      - LIVE_APP_ENABLED=false
      - LIVE_APP_URL_HOME=http://host.docker.internal:8000
      - LIVE_APP_URL_DASHBOARD=http://host.docker.internal:8000/docs
      - LIVE_APP_URL_API_DOCS=http://host.docker.internal:8000/redoc

      # ==========================================
      # Documentation Sections Control
      # ==========================================
      - INCLUDE_OVERVIEW=true
      - INCLUDE_ARCHITECTURE=true
      - INCLUDE_INSTALLATION=true
      - INCLUDE_USAGE=true
      - INCLUDE_API_REFERENCE=true
      - INCLUDE_DEVELOPMENT_GUIDE=true
      - INCLUDE_TROUBLESHOOTING=true
      - INCLUDE_DEPLOYMENT=false

      # Section Count Optimization
      - MIN_SECTIONS=9
      - MAX_SECTIONS=15

      # ==========================================
      # Advanced Settings
      # ==========================================
      - MAX_CODE_BLOCK_LINES=50
      - MAX_FILE_SIZE_KB=100
      - EXCLUDED_DIRECTORIES=node_modules,.git,__pycache__,venv,.venv,dist,build,target,bin,obj

      # ==========================================
      # PDF Export (Optional)
      # ==========================================
      # Enable to generate PDF in addition to DOCX
      # Note: PDF quality in Docker may be lower than native
      - ENABLE_PDF_EXPORT=false

    # Volume Mounts
    # ==========================================
    # Map host directories to container paths
    volumes:
      # OUTPUT: Where generated documentation will be saved
      # Change ./output to your preferred output location
      - ./output:/app/output

      # SCREENSHOTS: Where captured screenshots are stored
      # Change ./screenshots to your preferred location
      - ./screenshots:/app/screenshots

      # MERMAID DIAGRAMS: Where generated diagrams are stored
      # Change ./mermaid_diagrams to your preferred location
      - ./mermaid_diagrams:/app/mermaid_diagrams

      # PROJECT: The codebase to document
      # IMPORTANT: Change this to point to the project you want to document
      # Examples:
      #   - /path/to/your/project:/app/project          (Linux/macOS)
      #   - C:/Users/YourName/Projects/myapp:/app/project (Windows)
      # For testing this tool itself, use:
      - /home/user/Desktop/arise_fastapi:/app/project

    # Resource Limits (Optional)
    # ==========================================
    # Uncomment to limit container resource usage
    # deploy:
    #   resources:
    #     limits:
    #       cpus: '2.0'
    #       memory: 4G
    #     reservations:
    #       cpus: '1.0'
    #       memory: 2G

    # Network Configuration
    # ==========================================
    # IMPORTANT: Uncomment network_mode: host if:
    # 1. You're on Linux AND
    # 2. You want to capture screenshots of apps running on localhost (127.0.0.1)
    #
    # Note: network_mode: host works best on Linux. On Mac/Windows, use host.docker.internal instead.
    # When using host network mode, container shares host's network stack (no port mapping needed)
    #
    # network_mode: host

    # Healthcheck (Optional)
    # ==========================================
    # Uncomment to monitor container health
    # healthcheck:
    #   test: ["CMD", "python", "-c", "import google.generativeai"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 10s

# ==========================================
# Volumes (Optional Named Volumes)
# ==========================================
# Uncomment if you prefer named volumes over bind mounts
# volumes:
#   output-data:
#   screenshots-data:

# ==========================================
# Networks (Optional)
# ==========================================
# Uncomment if you need custom network configuration
# networks:
#   doc-generator-network:
#     driver: bridge

# ==========================================
# How to Run the Documentation Generator
# ==========================================
#
# BASIC USAGE:
# 1. Edit the environment variables above (especially GEMINI_API_KEY, PROJECT_PATH, PROJECT_NAME)
# 2. Run: docker-compose up
# 3. Wait for completion (container will stop automatically)
# 4. Find generated documentation in ./output directory
#
# IMPORTANT:
# - DO NOT use 'docker-compose up -d' (detached mode) as you won't see progress
# - Use 'docker-compose up' to see real-time generation logs
# - Container will exit automatically when documentation is complete
# - Check exit code: 0 = success, 1 = failure
#
# HOW TO KNOW WHEN COMPLETE:
# - Container will stop automatically
# - You'll see "Documentation generation complete!" in logs
# - Check ./output/.complete file exists (completion marker)
# - Exit code 0 means success
#
# USEFUL COMMANDS:
# - docker-compose up           # Run container and view logs
# - docker-compose logs         # View logs from previous run
# - docker-compose down         # Remove container
# - docker-compose build        # Rebuild image after code changes
# - ls -la ./output             # Check generated files
#
# TROUBLESHOOTING:
# - If container exits immediately, check: docker-compose logs
# - If stuck in restart loop, verify restart: "no" is set above
# - If no output files, check GEMINI_API_KEY is valid
# - If permission errors, check volume mount paths exist